// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: networking/v1alpha3/yx_adapter.proto

package v1alpha3

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	v1beta1 "istio.io/api/policy/v1beta1"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type KafkaConfig struct {
	Brokers              []string `protobuf:"bytes,1,rep,name=brokers,proto3" json:"brokers,omitempty"`
	Topic                string   `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KafkaConfig) Reset()         { *m = KafkaConfig{} }
func (m *KafkaConfig) String() string { return proto.CompactTextString(m) }
func (*KafkaConfig) ProtoMessage()    {}
func (*KafkaConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f9b1e19ee90016c, []int{0}
}
func (m *KafkaConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KafkaConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KafkaConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KafkaConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KafkaConfig.Merge(m, src)
}
func (m *KafkaConfig) XXX_Size() int {
	return m.Size()
}
func (m *KafkaConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_KafkaConfig.DiscardUnknown(m)
}

var xxx_messageInfo_KafkaConfig proto.InternalMessageInfo

func (m *KafkaConfig) GetBrokers() []string {
	if m != nil {
		return m.Brokers
	}
	return nil
}

func (m *KafkaConfig) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type YXAdapter struct {
	SamplePercent        *v1beta1.FractionalPercent `protobuf:"bytes,1,opt,name=sample_percent,json=samplePercent,proto3" json:"sample_percent,omitempty"`
	KafkaTracer          *KafkaConfig               `protobuf:"bytes,2,opt,name=kafka_tracer,json=kafkaTracer,proto3" json:"kafka_tracer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *YXAdapter) Reset()         { *m = YXAdapter{} }
func (m *YXAdapter) String() string { return proto.CompactTextString(m) }
func (*YXAdapter) ProtoMessage()    {}
func (*YXAdapter) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f9b1e19ee90016c, []int{1}
}
func (m *YXAdapter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YXAdapter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YXAdapter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YXAdapter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YXAdapter.Merge(m, src)
}
func (m *YXAdapter) XXX_Size() int {
	return m.Size()
}
func (m *YXAdapter) XXX_DiscardUnknown() {
	xxx_messageInfo_YXAdapter.DiscardUnknown(m)
}

var xxx_messageInfo_YXAdapter proto.InternalMessageInfo

func (m *YXAdapter) GetSamplePercent() *v1beta1.FractionalPercent {
	if m != nil {
		return m.SamplePercent
	}
	return nil
}

func (m *YXAdapter) GetKafkaTracer() *KafkaConfig {
	if m != nil {
		return m.KafkaTracer
	}
	return nil
}

func init() {
	proto.RegisterType((*KafkaConfig)(nil), "networking.v1alpha3.KafkaConfig")
	proto.RegisterType((*YXAdapter)(nil), "networking.v1alpha3.YXAdapter")
}

func init() {
	proto.RegisterFile("networking/v1alpha3/yx_adapter.proto", fileDescriptor_9f9b1e19ee90016c)
}

var fileDescriptor_9f9b1e19ee90016c = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xb1, 0x4a, 0xc4, 0x40,
	0x14, 0x45, 0x19, 0x45, 0x25, 0x13, 0xb5, 0x88, 0x16, 0xc1, 0x22, 0x84, 0x45, 0x30, 0xd5, 0x0c,
	0xd9, 0xad, 0x2d, 0x74, 0xc1, 0x46, 0x10, 0x09, 0x16, 0x6a, 0x13, 0x5e, 0xc6, 0x49, 0x1c, 0x12,
	0xe7, 0x0d, 0x93, 0x61, 0x75, 0xff, 0xc6, 0xcf, 0xb1, 0xf4, 0x13, 0x24, 0x5f, 0x22, 0x66, 0x76,
	0x71, 0x8b, 0x2d, 0x2f, 0x9c, 0xcb, 0x3b, 0xef, 0xd2, 0x73, 0x2d, 0xdd, 0x3b, 0xda, 0x56, 0xe9,
	0x86, 0x2f, 0x72, 0xe8, 0xcc, 0x2b, 0xcc, 0xf8, 0xf2, 0xa3, 0x84, 0x17, 0x30, 0x4e, 0x5a, 0x66,
	0x2c, 0x3a, 0x8c, 0x4e, 0xfe, 0x29, 0xb6, 0xa6, 0xce, 0x62, 0x83, 0x9d, 0x12, 0x4b, 0xbe, 0xc8,
	0x2b, 0xe9, 0x20, 0xe7, 0xa2, 0x6e, 0x3c, 0x3e, 0xb9, 0xa4, 0xe1, 0x2d, 0xd4, 0x2d, 0xcc, 0x51,
	0xd7, 0xaa, 0x89, 0x62, 0x7a, 0x50, 0x59, 0x6c, 0xa5, 0xed, 0x63, 0x92, 0xee, 0x66, 0x41, 0xb1,
	0x8e, 0xd1, 0x29, 0xdd, 0x73, 0x68, 0x94, 0x88, 0x77, 0x52, 0x92, 0x05, 0x85, 0x0f, 0x93, 0x4f,
	0x42, 0x83, 0xa7, 0xc7, 0x2b, 0x6f, 0x10, 0xdd, 0xd1, 0xe3, 0x1e, 0xde, 0x4c, 0x27, 0x4b, 0x23,
	0xad, 0x90, 0xda, 0xc5, 0x24, 0x25, 0x59, 0x38, 0xbd, 0x60, 0xaa, 0x77, 0x0a, 0x99, 0xb7, 0x60,
	0x2b, 0x0b, 0x76, 0x63, 0x41, 0x38, 0x85, 0x1a, 0xba, 0x7b, 0x8f, 0x17, 0x47, 0xbe, 0xbe, 0x8a,
	0xd1, 0x9c, 0x1e, 0xb6, 0x7f, 0x72, 0xa5, 0xb3, 0x20, 0xa4, 0x1d, 0x4f, 0x87, 0xd3, 0x94, 0x6d,
	0x79, 0x91, 0x6d, 0x7c, 0x51, 0x84, 0x63, 0xeb, 0x61, 0x2c, 0x5d, 0xb3, 0xaf, 0x21, 0x21, 0xdf,
	0x43, 0x42, 0x7e, 0x86, 0x84, 0x3c, 0xa7, 0xde, 0x44, 0x21, 0x07, 0xa3, 0xf8, 0x96, 0x45, 0xab,
	0xfd, 0x71, 0x98, 0xd9, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x83, 0x9f, 0x75, 0x6f, 0x01,
	0x00, 0x00,
}

func (m *KafkaConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KafkaConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KafkaConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintYxAdapter(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Brokers) > 0 {
		for iNdEx := len(m.Brokers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Brokers[iNdEx])
			copy(dAtA[i:], m.Brokers[iNdEx])
			i = encodeVarintYxAdapter(dAtA, i, uint64(len(m.Brokers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *YXAdapter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YXAdapter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YXAdapter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.KafkaTracer != nil {
		{
			size, err := m.KafkaTracer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYxAdapter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SamplePercent != nil {
		{
			size, err := m.SamplePercent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYxAdapter(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintYxAdapter(dAtA []byte, offset int, v uint64) int {
	offset -= sovYxAdapter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KafkaConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Brokers) > 0 {
		for _, s := range m.Brokers {
			l = len(s)
			n += 1 + l + sovYxAdapter(uint64(l))
		}
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovYxAdapter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *YXAdapter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SamplePercent != nil {
		l = m.SamplePercent.Size()
		n += 1 + l + sovYxAdapter(uint64(l))
	}
	if m.KafkaTracer != nil {
		l = m.KafkaTracer.Size()
		n += 1 + l + sovYxAdapter(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovYxAdapter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozYxAdapter(x uint64) (n int) {
	return sovYxAdapter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KafkaConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYxAdapter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KafkaConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KafkaConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Brokers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYxAdapter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYxAdapter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYxAdapter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Brokers = append(m.Brokers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYxAdapter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYxAdapter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYxAdapter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYxAdapter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYxAdapter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYxAdapter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YXAdapter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYxAdapter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YXAdapter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YXAdapter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SamplePercent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYxAdapter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYxAdapter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYxAdapter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SamplePercent == nil {
				m.SamplePercent = &v1beta1.FractionalPercent{}
			}
			if err := m.SamplePercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KafkaTracer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYxAdapter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYxAdapter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYxAdapter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KafkaTracer == nil {
				m.KafkaTracer = &KafkaConfig{}
			}
			if err := m.KafkaTracer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYxAdapter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYxAdapter
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthYxAdapter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipYxAdapter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowYxAdapter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYxAdapter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYxAdapter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthYxAdapter
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthYxAdapter
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowYxAdapter
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipYxAdapter(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthYxAdapter
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthYxAdapter = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowYxAdapter   = fmt.Errorf("proto: integer overflow")
)
